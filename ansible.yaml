- hosts: localhost
  become: true
  gather_facts: yes
  vars_files:
    - ./ansible-vars.yaml

  pre_tasks:
  - name: Install update-manager-core
    apt: name=update-manager-core
    when: (not update) or (not rcbd)

  - name: Update apt repo and cache
    apt:
      update_cache: yes
      force_apt_get: yes
      cache_valid_time: 3600
    when: not rcbd

  - name: Upgrade all packages on servers
    apt:
      upgrade: dist
      force_apt_get: yes
    when: not rcbd

#   - name: Add PPA repositories
#     ansible.builtin.apt_repository:
#       repo: "{{ item }}"
#     with_items:
#       - ppa:neovim-ppa/unstable
#       - ppa:cwchien/gradle

  - name: Install various repositories
    shell: |
      curl -sL https://deb.nodesource.com/setup_current.x | sudo -E sh -
      rel=$(lsb_release -r -s)
      curl -sSL https://packages.microsoft.com/config/ubuntu/${rel}/prod.list | tee /etc/apt/sources.list.d/microsoft-prod.list
      curl -sSL https://packages.microsoft.com/keys/microsoft.asc | tee /etc/apt/trusted.gpg.d/microsoft.asc
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg --batch --yes
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      apt-get update
      apt-cache policy docker-ce

  - name: Install packages
    apt:
      name: "{{ apt_pkgs }}"
      state: latest

  - name: prepare home directory
    shell: mkdir -p ${HOME}/.profile_paths

  - name: Install helm cli
    shell: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | sudo -E bash -

  - name: Install python packages
    pip:
      name: "{{ item }}"
      extra_args: --upgrade
      executable: pip3
    with_items:
    - pynvim
    - msgpack

  - name: Install NPM packages
    community.general.npm:
      name: "{{ item }}"
      version: latest
      global: yes
    with_items:
    - npm
    - neovim
    - '@fsouza/prettierd'
    - eslint_d
    - vscode-json-languageserver
    - yaml-language-server
    - bash-language-server
    - dockerfile-language-server-nodejs

  - name: vscode-json-language-server exists
    become: false
    shell: "ls /usr/bin/vscode-json-language-server"
    register: vscode_json_language_server_exists
    ignore_errors: yes
  - name: Install alternative name for vscode-json-languageserver
    shell: ln -s /usr/bin/vscode-json-languageserver /usr/bin/vscode-json-language-server
    when: vscode_json_language_server_exists is failed

  - name: Install latest neovim gem
    community.general.gem:
      name: neovim
      state: latest

#   - name: Install snap items
#     community.general.snap:
#       name: "{{ item.name }}"
#       classic: "{{ item.classic }}"
#     when: item.install
#     with_items:
#     - { name: glow, classic: no, install: yes }
#     - { name: powershell, classic: yes, install: "{{ pwsh_install }}" }
  - name: Install glow
    shell: |
      cd /tmp
      wget https://github.com/charmbracelet/glow/releases/download/v{{ glow_version }}/glow_{{ glow_version }}_amd64.deb
      apt install ./glow_1.5.1_amd64.deb

  - name: Install Azure CLI
    shell: |
      curl -sLS https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | tee /etc/apt/keyrings/microsoft.gpg > /dev/null
      AZ_REPO=$(lsb_release -cs)
      echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | tee /etc/apt/sources.list.d/azure-cli.list
      apt-get update
      apt-cache policy azure-cli
      apt-get install azure-cli="{{ azcli_version }}-1~$AZ_REPO" -y --allow-downgrades
    when: azcli_install

  - name: Get dive latest version
    shell: |
      DIVE_VERSION=$(curl -s "https://api.github.com/repos/wagoodman/dive/releases/latest" | grep -Po '"tag_name": "v\K[0-9.]+')
      curl -Lo dive.deb "https://github.com/wagoodman/dive/releases/latest/download/dive_${DIVE_VERSION}_linux_amd64.deb"
      sudo apt install -y ./dive.deb
      rm -rf dive.deb

  - name: golang version exists
    shell: ls {{ go_install_dir}}/{{ go_version }}
    register: golang_version_exists
    ignore_errors: yes
    when: go_install
  - name: Download go tar file
    shell: |
      mkdir -p /opt/go
      wget https://go.dev/dl/go{{ go_version }}.linux-amd64.tar.gz
      tar -C {{ go_install_dir}}/ -xzf go{{ go_version }}.linux-amd64.tar.gz
      mv {{ go_install_dir }}/go {{ go_install_dir }}/{{ go_version }}
      rm go{{ go_version }}.linux-amd64.tar.gz*
      rm -f {{ go_install_dir }}/current
      ln -s {{ go_install_dir }}/{{ go_version }} {{ go_install_dir }}/current
    when: (golang_version_exists is failed) and go_install

  post_tasks:
  - name: Link to current Maven installation
    shell: rm -f "/opt/maven" && ln -sf "/opt/apache-maven-{{ maven_version }}" "/opt/maven"

  - name: Install kubectl and kubelogin
    shell: az aks install-cli --install-location /usr/local/bin/kubectl --kubelogin-install-location /usr/local/bin/kubelogin

  - name: Remove useless packages from the cache
    apt:
      autoclean: yes

  - name: Remove dependencies that are no longer required
    apt:
      autoremove: yes

  - name: ensure fonts directory
    become: false
    file:
      path: "{{ lookup('env', 'HOME') }}/.fonts"
      state: directory

  - name: Download Nerd Font
    become: false
    ansible.builtin.unarchive:
      src: https://github.com/ryanoasis/nerd-fonts/releases/download/{{ nerd_font_version }}/{{ nerd_font }}.zip
      dest: "{{ lookup('env', 'HOME') }}/.fonts/"
      remote_src: yes

  - name: cache fonts
    become: false
    shell: fc-cache -fv

  - name: Install zoxide
    become: false
    shell: curl -ss https://webinstall.dev/zoxide | bash

  - name: install stylua rust package
    become: false
    community.general.cargo:
      name: stylua
      locked: true

  - name: install lazygit
    become: false
    shell: "{{ go_install_dir }}/current/bin/go install github.com/jesseduffield/lazygit@latest"

  - name: install flarectl
    become: false
    shell: "{{ go_install_dir }}/current/bin/go install github.com/cloudflare/cloudflare-go/cmd/flarectl@latest"

  - name: install yq
    become: false
    shell: "{{ go_install_dir }}/current/bin/go install github.com/mikefarah/yq/v4@latest"

  - name: install python packages
    become: false
    pip:
      name: "{{ item }}"
      extra_args: --upgrade
      executable: pip3
    with_items:
    - neovim-remote

  - name: install virtualenv for debugpy
    become: false
    shell: |
      mkdir -p ${HOME}/.virtualenvs
      cd ${HOME}/.virtualenvs
      python3 -m venv debugpy
      debugpy/bin/python -m pip install debugpy

  - name: install nvim config
    become: false
    shell: "mkdir -p ${HOME}/.config && rm -rf ${HOME}/.local/share/nvim/ ${HOME}/.config/nvim/ ${HOME}/.cache/nvim/ && cp -a ./nvim ${HOME}/.config/"
    when: (not update) and (not nvim_chad)
  - name: update nvim config
    become: false
    shell: "cp -a ./nvim ${HOME}/.config/"
    when: update and (not nvim_chad)
  - name: install nvim NvChad config
    become: false
    shell: "mkdir -p ${HOME}/.config && rm -rf ${HOME}/.local/share/nvim/ ${HOME}/.config/nvim/ ${HOME}/.cache/nvim/ && git clone https://github.com/NvChad/NvChad ${HOME}/.config/nvim --depth 1 && ln -s ${HOME}/projects/nvimlsp/custom ${HOME}/.config/nvim/lua/custom"
    when: (not update) and nvim_chad
  - name: upate nvim NvChad config
    become: false
    shell: "cd ${HOME}/.config/nvim && git pull"
    when: (not update) and nvim_chad

  - name: check tmux-plugins is installed
    become: false
    stat:
      path: ${HOME}/.tmux/plugins/tpm
    register: register_name
  - name: install tmux plugins
    become: false
    shell: "git clone https://github.com/tmux-plugins/tpm ${HOME}/.tmux/plugins/tpm"
    when: not register_name.stat.exists
  - name: update tmux plugins
    become: false
    shell: "cd ${HOME}/.tmux/plugins/tpm && git pull"
    when: register_name.stat.exists
  - name: Update tmux config
    become: false
    shell: "cp ./shell/.tmux.conf ${HOME}/"

  - name: Customize Zshell
    become: false
    shell: |
      rm -rf $HOME/.oh-my-zsh
      sh -c "$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"
      cp -a ./shell/zshcustom/* ${HOME}/.oh-my-zsh/custom/
      cp -a ./shell/bin ./shell/.*profile* ./shell/.gitconfig ${HOME}/
      sed -i 's/^ZSH_THEME=.*$/ZSH_THEME="agnoster"/' ${HOME}/.zshrc
      git clone https://github.com/zsh-users/zsh-autosuggestions ${HOME}/.oh-my-zsh/custom/plugins/zsh-autosuggestions
      git clone https://github.com/zsh-users/zsh-history-substring-search ${HOME}/.oh-my-zsh/custom/plugins/zsh-history-substring-search
      git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${HOME}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
      sed -i 's/^plugins=.*$/plugins=(ag docker kubectl z zsh-autosuggestions history-substring-search zsh-syntax-highlighting)/' ${HOME}/.zshrc
      echo ${HOME}/.cargo/bin >${HOME}/.profile_paths/cargo.path

  - name: Add PATH for golang
    become: false
    shell: |
      echo "{{ go_install_dir }}/current/bin" >${HOME}/.profile_paths/go.path
      echo ${HOME}/go/bin >${HOME}/.profile_paths/go_bin.path
    when: go_install

  - name: Add PATH for Maven
    become: false
    shell: echo /opt/maven/bin >${HOME}/.profile_paths/maven.path
    when: maven_install

  - name: Install Pulumi
    become: false
    shell: curl -fsSL https://get.pulumi.com | sh -s -- --version {{ pulumi_version }} && echo ${HOME}/.pulumi/bin >${HOME}/.profile_paths/pulumi.path
    when: pulumi_install

  - name: Install GoKube
    become: false
    shell: cd ./gokube && {{ go_install_dir }}/current/bin/go install ./cmd/gk && GOOS=windows GOARCH=amd64 {{ go_install_dir }}/current/bin/go build -o . ./cmd/gk
    when: go_install
