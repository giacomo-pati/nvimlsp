- hosts: localhost
  become: true
  gather_facts: yes
  vars_files:
    - ./ansible-vars.yaml

  pre_tasks:
  - name: Install update-manager-core
    apt: name=update-manager-core
    when: not update

  - name: Update apt repo and cache
    apt:
      update_cache: yes
      force_apt_get: yes
      cache_valid_time: 3600

  - name: Upgrade all packages on servers
    apt:
      upgrade: dist
      force_apt_get: yes

  - name: Add PPA repositories
    ansible.builtin.apt_repository:
      repo: "{{ item }}"
    with_items:
    - ppa:neovim-ppa/unstable
    - ppa:cwchien/gradle

  - name: Install various repositories
    shell: |
      curl -sL https://deb.nodesource.com/setup_current.x | sudo -E sh -
      rel=$(lsb_release -r -s)
      curl -sSL https://packages.microsoft.com/config/ubuntu/${rel}/prod.list | tee /etc/apt/sources.list.d/microsoft-prod.list
      curl -sSL https://packages.microsoft.com/keys/microsoft.asc | tee /etc/apt/trusted.gpg.d/microsoft.asc
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg --batch --yes
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      apt-get update
      apt-cache policy docker-ce

  - name: Install packages
    apt:
      name: "{{ item }}"
      state: latest
    with_items:
    - apt-transport-https
    - black
    # - blobfuse
    - libfuse2
    - ca-certificates
    - cargo
    - cpanminus
    - curl
    - daemonize
    - dbus-user-session
    - default-jdk
    - docker-ce
    - dos2unix
    - fd-find
    - flake8
    - fontconfig
    - fzf
    - gcc
    - gnupg
    - gradle
    - graphviz
    - g++
    - jq
    - lsb-release
    - locate
    - luarocks
    - lynx
    - make
    - neovim
    - nodejs
    - python3-dev
    - python3-pip
    - python3-venv
    - ripgrep
    - ruby-full
    - shellcheck
    - silversearcher-ag
    - speedometer
    - sqlite3
    - tmux
    - zsh

  - name: Install helm cli
    shell: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | sudo -E bash -

  - name: Install python packages
    pip:
      name: "{{ item }}"
      extra_args: --upgrade
      executable: pip3
    with_items:
    - pynvim
    - msgpack

  - name: Install NPM packages
    community.general.npm:
      name: "{{ item }}"
      version: latest
      global: yes
    with_items:
    - npm
    - neovim
    - '@fsouza/prettierd'
    - eslint_d
    - vscode-json-languageserver
    - yaml-language-server
    - bash-language-server
    - dockerfile-language-server-nodejs

  - name: vscode-json-language-server exists
    become: false
    shell: "ls /usr/bin/vscode-json-language-server"
    register: vscode_json_language_server_exists
    ignore_errors: yes
  - name: Install alternative name for vscode-json-languageserver
    shell: ln -s /usr/bin/vscode-json-languageserver /usr/bin/vscode-json-language-server
    when: vscode_json_language_server_exists is failed

  - name: Install latest neovim gem
    community.general.gem:
      name: neovim
      state: latest

  - name: Install snap items
    community.general.snap:
      name: "{{ item.name }}"
      classic: "{{ item.classic }}"
    when: item.install
    with_items:
    - { name: glow, classic: no, install: yes }
    - { name: powershell, classic: yes, install: "{{ pwsh_install }}" }
  - name: Link SNAP items to /bin
    shell: |
      ln -sf /snap/bin/pwsh /bin/pwsh
      ln -sf /snap/bin/glow /bin/glow

  - name: Install Azure CLI
    shell: |
      curl -sLS https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | tee /etc/apt/keyrings/microsoft.gpg > /dev/null
      AZ_REPO=$(lsb_release -cs)
      echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | tee /etc/apt/sources.list.d/azure-cli.list
      apt-get update
      apt-cache policy azure-cli
      apt-get install azure-cli="{{ azcli_version }}-1~$AZ_REPO" -y --allow-downgrades
    when: azcli_install

  - name: Get dive latest version
    shell: |
      DIVE_VERSION=$(curl -s "https://api.github.com/repos/wagoodman/dive/releases/latest" | grep -Po '"tag_name": "v\K[0-9.]+')
      curl -Lo dive.deb "https://github.com/wagoodman/dive/releases/latest/download/dive_${DIVE_VERSION}_linux_amd64.deb"
      sudo apt install -y ./dive.deb
      rm -rf dive.deb

  roles:
  - role: gantsign.golang
    vars:
    - golang_version: "{{ go_version }}"
    - golang_install_dir: "{{ go_install_dir }}"
    - golang_redis_sha256sum: '000a5b1fca4f75895f78befeb2eecf10bfff3c428597f3f1e69133b63b911b02'
    when: go_install
  - role: lean_delivery.java
    # vars:
      # transport: repositories
      # java_major_version: "{{ java_major_version }}"
    when: java_install or maven_install
  - role: tecris.maven
    when: maven_install

  post_tasks:
  - name: Link to current golang installation
    shell: rm -f "$(dirname {{ go_install_dir }})/current" && ln -s "{{ go_install_dir }}" "$(dirname {{ go_install_dir }})/current"

  - name: Link to current Maven installation
    shell: rm -f "/opt/maven" && ln -sf "/opt/apache-maven-{{ maven_version }}" "/opt/maven"

  - name: Install kubectl and kubelogin
    shell: az aks install-cli --install-location /usr/local/bin/kubectl --kubelogin-install-location /usr/local/bin/kubelogin

  - name: Remove useless packages from the cache
    apt:
      autoclean: yes

  - name: Remove dependencies that are no longer required
    apt:
      autoremove: yes

  - name: ensure fonts directory
    become: false
    file:
      path: "{{ lookup('env', 'HOME') }}/.fonts"
      state: directory

  - name: Nerd fonts exists
    become: false
    shell: "ls {{ lookup('env', 'HOME') }}/.fonts/{{ nerd_font }}*Nerd*Font*Complete*"
    register: NerdFont_exists
    ignore_errors: yes

  - name: Download Nerd Font
    become: false
    when: NerdFont_exists is failed
    ansible.builtin.unarchive:
      src: https://github.com/ryanoasis/nerd-fonts/releases/download/{{ nerd_font_version }}/{{ nerd_font }}.zip
      dest: "{{ lookup('env', 'HOME') }}/.fonts/"
      remote_src: yes

  - name: cache fonts
    become: false
    shell: fc-cache -fv

  - name: Install zoxide
    become: false
    shell: curl -ss https://webinstall.dev/zoxide | bash

  - name: install stylua rust package
    become: false
    community.general.cargo:
      name: stylua

  - name: install lazygit
    become: false
    shell: "{{ go_install_dir }}/bin/go install github.com/jesseduffield/lazygit@latest"

  - name: install flarectl
    become: false
    shell: "{{ go_install_dir }}/bin/go install github.com/cloudflare/cloudflare-go/cmd/flarectl@latest"

  - name: install yq
    become: false
    shell: "{{ go_install_dir }}/bin/go install github.com/mikefarah/yq/v4@latest"

  - name: install python packages
    become: false
    pip:
      name: "{{ item }}"
      extra_args: --upgrade
      executable: pip3
    with_items:
    - neovim-remote

  - name: install virtualenv for debugpy
    become: false
    shell: |
      mkdir -p ${HOME}/.virtualenvs
      cd ${HOME}/.virtualenvs
      python3 -m venv debugpy
      debugpy/bin/python -m pip install debugpy

  - name: install nvim config
    become: false
    shell: "mkdir -p ${HOME}/.config && rm -rf ${HOME}/.local/share/nvim/ ${HOME}/.config/nvim/ ${HOME}/.cache/nvim/ && cp -a ./nvim ${HOME}/.config/"
    when: not update
  - name: update nvim config
    become: false
    shell: "cp -a ./nvim ${HOME}/.config/"
    when: update

  - name: check tmux-plugins is installed
    become: false
    stat:
      path: ${HOME}/.tmux/plugins/tpm
    register: register_name
  - name: install tmux plugins
    become: false
    shell: "git clone https://github.com/tmux-plugins/tpm ${HOME}/.tmux/plugins/tpm"
    when: not register_name.stat.exists
  - name: update tmux plugins
    become: false
    shell: "cd ${HOME}/.tmux/plugins/tpm && git pull"
    when: register_name.stat.exists
  - name: Update tmux config
    become: false
    shell: "cp ./shell/.tmux.conf ${HOME}/"

  - name: Customize Zshell
    become: false
    shell: |
      rm -rf $HOME/.oh-my-zsh
      sh -c "$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"
      cp -a ./shell/zshcustom/* ${HOME}/.oh-my-zsh/custom/
      cp -a ./shell/bin ./shell/.*profile* ./shell/.gitconfig ${HOME}/
      sed -i 's/^ZSH_THEME=.*$/ZSH_THEME="agnoster"/' ${HOME}/.zshrc
      git clone https://github.com/zsh-users/zsh-autosuggestions ${HOME}/.oh-my-zsh/custom/plugins/zsh-autosuggestions
      git clone https://github.com/zsh-users/zsh-history-substring-search ${HOME}/.oh-my-zsh/custom/plugins/zsh-history-substring-search
      git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${HOME}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
      sed -i 's/^plugins=.*$/plugins=(ag docker kubectl z zsh-autosuggestions history-substring-search zsh-syntax-highlighting)/' ${HOME}/.zshrc
      echo export PATH=\$PATH:\${HOME}/.cargo/bin >>${HOME}/.profile_paths

  - name: Add PATH for golang
    become: false
    shell: echo export PATH=\$PATH:$(dirname "{{ go_install_dir }}")/current/bin:\${HOME}/go/bin >>${HOME}/.profile_paths
    when: go_install

  - name: Add PATH for Maven
    become: false
    shell: echo export PATH=\$PATH:/opt/maven/bin >>${HOME}/.profile_paths && echo export M2_HOME=/opt/maven >>${HOME}/.profile_paths
    when: maven_install

  - name: Install Pulumi
    become: false
    shell: curl -fsSL https://get.pulumi.com | sh -s -- --version {{ pulumi_version }} && echo export PATH=\$PATH:\${HOME}/.pulumi/bin >>${HOME}/.profile_paths
    when: pulumi_install

  - name: Install GoKube
    become: false
    shell: cd ./gokube && {{ go_install_dir }}/bin/go install ./cmd/gk
    when: go_install
